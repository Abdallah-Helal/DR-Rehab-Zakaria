const response_header = {
  "Access-Control-Allow-Headers": "", // What headers are allowed. * is wildcard. Instead of using '', you can specify a list of specific headers that are allowed, such as: Access-Control-Allow-Headers: X-Requested-With, Content-Type, Accept, Authorization.
  "Access-Control-Allow-Methods": "POST", // Allowed methods. Others could be GET, PUT, DELETE etc.
  "Access-Control-Allow-Origin": "*", // This is URLs that are allowed to access the server. * is the wildcard character meaning any URL can.
};

function getMailContent(name, email, phone, message) {
  return `
    <div style='width: 100%; background-color: #f3f9ff; padding: 5rem 0'>
      <div style='max-width: 700px; background-color: white; margin: 0 auto'>
        <div style='width: 100%; background-color: #00efbc; padding: 20px 0'></div>
        <div style='width: 100%; gap: 10px; padding: 30px 0; display: grid'>
          <p style='font-weight: 800; font-size: 1.2rem; padding: 0 30px'>
            From contact us form
          </p>
          <div style='font-size: .8rem; margin: 0 30px'>
            <p>Name: <b>${name}</b></p>
            <p>Email: <b>${email}</b></p>
            <p>Phone: <b>${phone}</b></p>
            <p>Message: <i>${message}</i></p>
          </div>
        </div>
      </div>
    </div>
  `;
}

async function sendMail(emailContent, apiKey) {
  await fetch("https://api.elasticemail.com/v4/emails/transactional", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "X-ElasticEmail-ApiKey": apiKey,
    },
    body: JSON.stringify({
      Recipients: {
        To: ["info@elite-dia.com"],
      },
      Content: {
        Body: [
          {
            ContentType: "HTML",
            Content: emailContent,
            Charset: "string",
          },
        ],
        From: "info@elite-dia.com",
        Subject: "Contact-us message",
      },
    }),
  });
}

export default {
  async fetch(request, env) {
    if (request.method === "OPTIONS") {
      return new Response(null, {
        headers: { ...response_header },
        status: 204,
      });
    }

    // get data from the request body json
    const body = await request.text();
    if (!body)
      return new Response(JSON.stringify({ error: "No data provided" }), {
        headers: { ...response_header },
        status: 400,
      });

    const data = JSON.parse(body);
    const { name, email, phone, message } = data;
    if (!name || !email || !phone || !message) {
      // return error response as json with missing fields
      const missing_fields = [];
      if (!name) missing_fields.push("name");
      if (!email) missing_fields.push("email");
      if (!phone) missing_fields.push("phone");
      if (!message) missing_fields.push("message");
      return new Response(
        JSON.stringify({
          error: `Missing fields: ${missing_fields.join(", ")}`,
        }),
        {
          headers: { ...response_header },
          status: 400,
        }
      );
    }

    // send email
    try {
      await sendMail(
        getMailContent(name, email, phone, message),
        env.ELASTIC_EMAIL_API_KEY
      );
    } catch (error) {
      return new Response(JSON.stringify({ error: error.message }), {
        headers: { ...response_header },
        status: 500,
      });
    }

    return new Response(
      JSON.stringify({ message: "Message sent successfully" }),
      {
        headers: { ...response_header },
        status: 200,
      }
    );
  },
};
